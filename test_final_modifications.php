<?php

require_once 'vendor/autoload.php';

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Session;

// Configurar Laravel
$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

echo "=== TESTE DAS MODIFICA√á√ïES NA FINALIZA√á√ÉO ===\n\n";

// Fun√ß√£o para limpar dados de teste
function limparDadosTeste() {
    DB::table('tickets')->where('id_cliente', 1)->delete();
    DB::table('parcelas')->where('id_cliente', 1)->delete();
    DB::table('vendas_tabira')->where('id_vendedor', 1)->delete();
    
    // Restaurar cliente de teste
    DB::table('clientes')->where('id', 1)->update([
        'limite' => 500.00, // Limite baixo para for√ßar entrada obrigat√≥ria
        'token' => '123456'  // Token inicial
    ]);
    
    echo "‚úì Dados de teste limpos e cliente restaurado\n";
}

// Fun√ß√£o para verificar cliente
function verificarCliente($clienteId) {
    $cliente = DB::table('clientes')->where('id', $clienteId)->first();
    return [
        'limite' => $cliente->limite,
        'token' => $cliente->token
    ];
}

echo "TESTE: Modifica√ß√µes na finaliza√ß√£o da venda credi√°rio\n";
echo "=" . str_repeat("=", 55) . "\n";

// Limpar dados anteriores
limparDadosTeste();

// Verificar cliente antes
$clienteAntes = verificarCliente(1);
echo "Cliente ANTES da finaliza√ß√£o:\n";
echo "  Limite: R$ " . number_format($clienteAntes['limite'], 2, ',', '.') . "\n";
echo "  Token: " . ($clienteAntes['token'] ?? 'NULL') . "\n\n";

try {
    // Simular dados da venda credi√°rio com entrada obrigat√≥ria
    $controller = new App\Http\Controllers\CarrinhoController();
    
    // Simular dados da sess√£o
    Session::put('cliente_crediario', [
        'id' => 1,
        'nome' => 'Jo√£o Silva',
        'token' => '123456'
    ]);
    
    // Simular venda com entrada obrigat√≥ria
    // Cliente tem limite de R$ 500, compra de R$ 800 (excede em R$ 300)
    // Entrada de R$ 200 (maior que m√≠nima de R$ 150)
    $vendaCrediarioData = [
        'ticket' => 'TK20250810000000TEST',
        'valor_entrada' => 200.00,  // Entrada obrigat√≥ria
        'metodo_entrada' => 'dinheiro',
        'valor_crediario' => 600.00
    ];
    
    $totalCompra = $vendaCrediarioData['valor_entrada'] + $vendaCrediarioData['valor_crediario'];
    
    echo "Simulando finaliza√ß√£o de venda:\n";
    echo "  Total da compra: R$ " . number_format($totalCompra, 2, ',', '.') . "\n";
    echo "  Entrada: R$ " . number_format($vendaCrediarioData['valor_entrada'], 2, ',', '.') . "\n";
    echo "  Credi√°rio: R$ " . number_format($vendaCrediarioData['valor_crediario'], 2, ',', '.') . "\n";
    echo "  Limite atual: R$ " . number_format($clienteAntes['limite'], 2, ',', '.') . "\n";
    echo "  Excesso: R$ " . number_format($totalCompra - $clienteAntes['limite'], 2, ',', '.') . "\n\n";
    
    // Usar reflex√£o para acessar m√©todo privado
    $reflection = new ReflectionClass($controller);
    $processMethod = $reflection->getMethod('processPostSaleModifications');
    $processMethod->setAccessible(true);
    
    // Executar as modifica√ß√µes p√≥s-venda
    echo "Executando modifica√ß√µes p√≥s-venda...\n";
    $processMethod->invoke($controller, $vendaCrediarioData);
    
    // Verificar cliente depois
    $clienteDepois = verificarCliente(1);
    echo "\nCliente DEPOIS das modifica√ß√µes:\n";
    echo "  Limite: R$ " . number_format($clienteDepois['limite'], 2, ',', '.') . "\n";
    echo "  Token: " . ($clienteDepois['token'] ?? 'NULL') . "\n\n";
    
    // An√°lise dos resultados
    $aumentoLimite = $clienteDepois['limite'] - $clienteAntes['limite'];
    $tokenLimpo = $clienteDepois['token'] === null;
    
    echo "RESULTADOS:\n";
    echo "  Aumento do limite: R$ " . number_format($aumentoLimite, 2, ',', '.') . "\n";
    echo "  Token limpo: " . ($tokenLimpo ? 'Sim' : 'N√£o') . "\n\n";
    
    // Verifica√ß√µes
    $teste1Passou = $aumentoLimite == $vendaCrediarioData['valor_entrada'];
    $teste2Passou = $tokenLimpo;
    
    echo "VERIFICA√á√ïES:\n";
    echo "1. Limite aumentado no valor da entrada: " . ($teste1Passou ? "‚úÖ PASSOU" : "‚ùå FALHOU") . "\n";
    echo "   Esperado: R$ " . number_format($vendaCrediarioData['valor_entrada'], 2, ',', '.') . "\n";
    echo "   Obtido: R$ " . number_format($aumentoLimite, 2, ',', '.') . "\n\n";
    
    echo "2. Token definido como NULL: " . ($teste2Passou ? "‚úÖ PASSOU" : "‚ùå FALHOU") . "\n";
    echo "   Esperado: NULL\n";
    echo "   Obtido: " . ($clienteDepois['token'] ?? 'NULL') . "\n\n";
    
    if ($teste1Passou && $teste2Passou) {
        echo "üéâ TODOS OS TESTES PASSARAM! As modifica√ß√µes est√£o funcionando corretamente.\n";
    } else {
        echo "‚ùå ALGUNS TESTES FALHARAM. Verifique a implementa√ß√£o.\n";
    }
    
} catch (Exception $e) {
    echo "‚ùå ERRO durante o teste: " . $e->getMessage() . "\n";
    echo "Stack trace: " . $e->getTraceAsString() . "\n";
}

echo "\n=== TESTE CONCLU√çDO ===\n";